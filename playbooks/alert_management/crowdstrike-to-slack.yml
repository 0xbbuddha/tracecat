title: Fetch Crowdstrike alerts and open cases.
description: Pulls Crowdstrike alerts and opens cases in Tracecat.
entrypoint: pull_crowdstrike_alerts
triggers:
  - type: webhook
    ref: crowdstrike_alerts_webhook
    entrypoint: pull_crowdstrike_alerts

actions:
  - ref: pull_crowdstrike_alerts
    action: integrations.crowdstrike.list_crowdstrike_alerts
    args:
      start_time: ${{ TRIGGER.start_time }}
      end_time: ${{ TRIGGER.end_time }}

  - ref: reshape_alerts_into_smac
    action: core.transform.forward
    depends_on:
      - pull_crowdstrike_alerts
    for_each: ${{ for var.alert in ACTIONS.pull_crowdstrike_alerts.result }}
    args:
      value:
        title: ${{ var.alert__name }} # Name of the detection
        description: ${{ var.alert.description }} # Description of the detected file or activity
        payload:
          rule: ${{ var.alert.id }} # Identifier associated with the alert
          severity: ${{ var.alert.severity }} # Severity level associated with the detection
        status: ${{ 'closed' if var.alert.status == 'resolved' else 'open' }} # Status of the alert
        malice: ${{ 'malicious' if FN.greater_than(var.alert.severity, 0) else 'benign' }} # Determines malice based on severity
        action: quarantine
        context:
          filepath: ${{ var.alert.filepath }}
          cid: ${{ var.alert.cid }} # CrowdStrike identifier associated with the device
          parent_user_id: ${{ var.alert.parent_details.user_id -> str }}
          parent_user_name: ${{ var.alert.parent_details.user_name -> str }}
          grandparent_user_id: ${{ var.alert.grandparent_details.user_id -> str }}
          grandparent_user_name: ${{ var.alert.grandparent_details.user_name -> str }}
          resource_type: ${{ 'device' }} # Assuming resource type is 'device'
          context_timestamp: ${{ var.alert.context_timestamp -> str }}
          updated_at: ${{ var.alert.updated_timestamp -> str }} # Timestamp indicating when the alert was last updated
          created_at: ${{ var.alert.created_timestamp -> str }} # Timestamp indicating when the alert was created

  - ref: open_cases
    action: core.open_case
    depends_on:
      - suggest_osquery_queries
    for_each: ${{ for var.alert in ACTIONS.reshape_alerts_into_smac.result }}
    args:
      case_title: ${{ var.alert.title }}
      status: ${{ var.alert.status }}
      malice: ${{ var.alert.malice }}
      action: ${{ var.alert.action }}
      context: ${{ var.alert.context }}
      payload: ${{ var.alert.payload }}
      priority: ${{ var.alert.severity }}
